#!/bin/bash

# Script for generating strings.xml files from tsv files generated by Google Docs

#####CONFIG#####
# dir where the tsv files exported from Google Docs sheet are saved by default
DOWNLOADS_DIR="/home/zb/Downloads"
###END CONFIG###

#if [ ! -f $1 ]; then
#  echo "file does not exist"
#  exit 0
#fi

ORIG_APP_XLATIONS_FILE="$DOWNLOADS_DIR/sliding-puzzle-xlations - app.tsv"
ORIG_GP_XLATIONS_FILE="$DOWNLOADS_DIR/sliding-puzzle-xlations - gp.tsv"
APP_XLATIONS_FILE="app.tsv"
GP_XLATIONS_FILE="gp.tsv"

if [ -e "$ORIG_APP_XLATIONS_FILE" ]; then
  cat "$ORIG_APP_XLATIONS_FILE"| sed 's/^M$//' > "$APP_XLATIONS_FILE"
  echo "" >> "$APP_XLATIONS_FILE"
  
fi

if [ -e "$ORIG_GP_XLATIONS_FILE" ]; then
  cat "$ORIG_GP_XLATIONS_FILE"| sed 's/^M$//' > "$GP_XLATIONS_FILE"
  echo "" >> "$GP_XLATIONS_FILE"
fi

RES_XML_HEADER="<?xml version=\"1.0\" encoding=\"utf-8\"?>"
RES_LIST_START="<resources>"
RES_LIST_END="</resources>"
RES_ITEM_START="    <string name=\""
RES_ITEM_MIDDLE="\">"
RES_ITEM_END="</string>"
DEFAULT_LOC="en"

firstline=""

function getTargetFile() {
  if [[ $1 == "$DEFAULT_LOC" ]]; then
    echo -n "../app/src/main/res/values/strings.xml"
  else
    echo -n "../app/src/main/res/values-"$1"/strings.xml"
  fi
}

while read rawline
do
  # strip eol
  line=`echo -n "$rawline" | sed 's/\r$//g'`
  if [[ $firstline == "" ]]; then
    #process header
    firstline=$line
    #get all available languages and save them into $langs
    tokenscount=`echo "$firstline" | wc -w`
    for i in `seq 2 $tokenscount`
    do
      token=`echo -n "$firstline" | cut -d '	' -f $i`
      langs="$langs$token "
    done
    echo "languages:"
    echo $langs

    #write starting part of xml files
    for lang in $langs
    do
      targetfile=$(getTargetFile $lang)
      echo $RES_XML_HEADER > $targetfile
      echo $RES_LIST_START >> $targetfile
    done
  else
    #process regular lines
    key=`echo "$line" | cut -d '	' -f 1`
    echo $key

    for i in `seq 2 $tokenscount`
    do
      lang=`echo "$firstline" | cut -d '	' -f $i`
      targetfile=$(getTargetFile $lang)
      text=`echo "$line" | cut -d '	' -f $i`

      echo "${RES_ITEM_START}${key}${RES_ITEM_MIDDLE}${text}${RES_ITEM_END}" >> $targetfile
    done
  fi
done < "$APP_XLATIONS_FILE"

for lang in $langs
do
  targetfile=$(getTargetFile $lang)
  echo $RES_LIST_END >> $targetfile
done
